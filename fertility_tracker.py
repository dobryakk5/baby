# fertility_tracker_bot.py
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramForbiddenError
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import asyncio
import logging
from logging.handlers import TimedRotatingFileHandler
import os
from dotenv import load_dotenv
from datetime import datetime
from typing import Dict, List
from db_handler import db

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YY
def format_date(date_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ YYYY-MM-DD –≤ DD.MM.YY"""
    try:
        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        return date_obj.strftime("%d.%m.%y")
    except:
        return date_str

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–¥–ª—è –ë–î)
def get_today_db_format():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –¥–ª—è –ë–î"""
    return datetime.now().strftime("%Y-%m-%d")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YY (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
def get_today_display_format():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YY –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return datetime.now().strftime("%d.%m.%y")

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üå° –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")
    builder.button(text="üíß –í—ã–¥–µ–ª–µ–Ω–∏—è")
    builder.button(text="üîπ –®–µ–π–∫–∞ –º–∞—Ç–∫–∏")
    builder.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    builder.button(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
    builder.button(text="üîÑ –ù–æ–≤—ã–π —Ü–∏–∫–ª")
    builder.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def command_start_handler(message: Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.create_user(user_id, username, first_name, last_name)
        
        welcome_text = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! üëã\n\n"
            "–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–ø—Ç–æ—Ç–µ—Ä–º–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞.\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:\n"
            "üîπ –ë–∞–∑–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ç–µ–ª–∞ (–ë–¢–¢)\n"
            "üîπ –í—ã–¥–µ–ª–µ–Ω–∏—è\n"
            "üîπ –ü–æ–ª–æ–∂–µ–Ω–∏–µ —à–µ–π–∫–∏ –º–∞—Ç–∫–∏\n"
            "üîπ –ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—é\n"
            "üîπ –î—Ä—É–≥–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ –∏–ª–∏ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
        await message.answer(welcome_text, reply_markup=get_main_keyboard())
    except TelegramForbiddenError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def command_help_handler(message: Message):
    try:
        help_text = (
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏–º–ø—Ç–æ—Ç–µ—Ä–º–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/add_temperature - –î–æ–±–∞–≤–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –±–∞–∑–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ç–µ–ª–∞\n"
            "/add_discharge - –î–æ–±–∞–≤–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏—è\n"
            "/add_cervix - –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —à–µ–π–∫–∏ –º–∞—Ç–∫–∏\n"
            "/add_menstruation - –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏\n"
            "/add_note - –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è\n"
            "/view_data - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —Ü–∏–∫–ª–∞\n"
            "/view_chart - –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã\n"
            "/reset_cycle - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª\n\n"
            "–°–∏–º–ø—Ç–æ—Ç–µ—Ä–º–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—É—Ç–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n"
            "1. –ë–∞–∑–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ–ª–∞ (–∏–∑–º–µ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ)\n"
            "2. –ù–∞–±–ª—é–¥–µ–Ω–∏–π –∑–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è–º–∏\n"
            "3. –ü–æ–ª–æ–∂–µ–Ω–∏—è —à–µ–π–∫–∏ –º–∞—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
        )
        await message.answer(help_text, reply_markup=get_main_keyboard())
    except TelegramForbiddenError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ help: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
@dp.message(F.text == "üå° –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")
async def handle_temperature_button(message: Message):
    try:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –±–∞–∑–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ç–µ–ª–∞ (–≤ ¬∞C):")
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        user_id = message.from_user.id
        # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ø—Ä–æ—Å—Ç–æ–º —Å–ª–æ–≤–∞—Ä–µ (–≤ production –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FSM)
        if not hasattr(dp, 'temp_input_state'):
            dp.temp_input_state = {}
        dp.temp_input_state[user_id] = True
    except TelegramForbiddenError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
@dp.message(lambda message: hasattr(dp, 'temp_input_state') and 
                           message.from_user.id in dp.temp_input_state and 
                           dp.temp_input_state[message.from_user.id])
async def handle_temperature_input(message: Message):
    try:
        user_id = message.from_user.id
        try:
            temperature = float(message.text.replace(',', '.'))
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (—Ä–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ë–¢–¢)
            if 35.0 <= temperature <= 40.0:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                today_db = get_today_db_format()  # –§–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
                today_display = get_today_display_format()  # –§–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                logging.debug(f"Processing temperature input for user {user_id} on date {today_db}")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π
                record = await db.get_record_by_date(user_id, today_db)
                if record:
                    logging.debug(f"Updating existing record for user {user_id}")
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
                    await db.create_record(
                        user_id=user_id,
                        record_date=today_db,
                        temperature=temperature,
                        mucus_type=record.get('mucus_type'),
                        menstruation_type=record.get('menstruation_type'),
                        cervical_position=record.get('cervical_position'),
                        note=record.get('note'),
                        abdominal_pain=record.get('abdominal_pain'),
                        breast_tenderness=record.get('breast_tenderness'),
                        intercourse=record.get('intercourse')
                    )
                else:
                    logging.debug(f"Creating new record for user {user_id}")
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                    await db.create_record(
                        user_id=user_id,
                        record_date=today_db,
                        temperature=temperature
                    )
                
                await message.answer(f"‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temperature}¬∞C –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ {today_display}", reply_markup=get_main_keyboard())
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç 35.0¬∞C –¥–æ 40.0¬∞C")
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
        
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞
        if hasattr(dp, 'temp_input_state') and user_id in dp.temp_input_state:
            del dp.temp_input_state[user_id]
    except TelegramForbiddenError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e}")
        import traceback
        logging.error(f"Traceback: {traceback.format_exc()}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏–π
@dp.message(F.text == "üíß –í—ã–¥–µ–ª–µ–Ω–∏—è")
async def handle_discharge_button(message: Message):
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–∏–ø–æ–≤ –≤—ã–¥–µ–ª–µ–Ω–∏–π
        builder = InlineKeyboardBuilder()
        builder.button(text="–ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è", callback_data="discharge_menstruation")
        builder.button(text="–°—É—Ö–æ", callback_data="discharge_dry")
        builder.button(text="–í–ª–∞–∂–Ω–æ", callback_data="discharge_wet")
        builder.button(text="–ú–æ–∫—Ä–æ", callback_data="discharge_moist")
        builder.adjust(2)
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–¥–µ–ª–µ–Ω–∏–π:", reply_markup=builder.as_markup())
    except TelegramForbiddenError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–π: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—ã–¥–µ–ª–µ–Ω–∏–π
@dp.callback_query(lambda c: c.data.startswith("discharge_"))
async def handle_discharge_selection(callback_query: CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        discharge_type = callback_query.data.split("_")[1]
        
        today_db = get_today_db_format()  # –§–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
        today_display = get_today_display_format()  # –§–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        logging.debug(f"Processing discharge selection for user {user_id} on date {today_db}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π
        record = await db.get_record_by_date(user_id, today_db)
        
        if discharge_type == "menstruation":
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            builder = InlineKeyboardBuilder()
            builder.button(text="–°–ª–∞–±—ã–µ", callback_data="menstruation_light")
            builder.button(text="–°—Ä–µ–¥–Ω–∏–µ", callback_data="menstruation_medium")
            builder.button(text="–û–±–∏–ª—å–Ω—ã–µ", callback_data="menstruation_heavy")
            builder.button(text="–ú–∞–∂—É—â–∏–µ", callback_data="menstruation_spotting")
            builder.adjust(2)
            
            await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏:", reply_markup=builder.as_markup())
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ —Å–ª–∏–∑–∏
            discharge_descriptions = {
                "dry": "–°—É—Ö–æ",
                "wet": "–í–ª–∞–∂–Ω–æ", 
                "moist": "–ú–æ–∫—Ä–æ"
            }
            
            if record:
                logging.debug(f"Updating existing record for user {user_id}")
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
                await db.create_record(
                    user_id=user_id,
                    record_date=today_db,
                    temperature=record.get('temperature'),
                    mucus_type=discharge_descriptions[discharge_type],
                    menstruation_type=record.get('menstruation_type'),
                    cervical_position=record.get('cervical_position'),
                    note=record.get('note'),
                    abdominal_pain=record.get('abdominal_pain'),
                    breast_tenderness=record.get('breast_tenderness'),
                    intercourse=record.get('intercourse')
                )
            else:
                logging.debug(f"Creating new record for user {user_id}")
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                await db.create_record(
                    user_id=user_id,
                    record_date=today_db,
                    mucus_type=discharge_descriptions[discharge_type]
                )
            
            await callback_query.message.edit_text(f"‚úÖ –í—ã–¥–µ–ª–µ–Ω–∏—è '{discharge_descriptions[discharge_type]}' –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {today_display}")
        
        await callback_query.answer()
    except TelegramForbiddenError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≤—ã–¥–µ–ª–µ–Ω–∏–π: {e}")
        import traceback
        logging.error(f"Traceback: {traceback.format_exc()}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
@dp.callback_query(lambda c: c.data.startswith("menstruation_"))
async def handle_menstruation_selection(callback_query: CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        menstruation_type = callback_query.data.split("_")[1]
        menstruation_descriptions = {
            "light": "–°–ª–∞–±—ã–µ",
            "medium": "–°—Ä–µ–¥–Ω–∏–µ",
            "heavy": "–û–±–∏–ª—å–Ω—ã–µ",
            "spotting": "–ú–∞–∂—É—â–∏–µ"
        }
        
        today_db = get_today_db_format()  # –§–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
        today_display = get_today_display_format()  # –§–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        logging.debug(f"Processing menstruation selection for user {user_id} on date {today_db}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π
        record = await db.get_record_by_date(user_id, today_db)
        if record:
            logging.debug(f"Updating existing record for user {user_id}")
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
            await db.create_record(
                user_id=user_id,
                record_date=today_db,
                temperature=record.get('temperature'),
                mucus_type=record.get('mucus_type'),
                menstruation_type=menstruation_descriptions[menstruation_type],
                cervical_position=record.get('cervical_position'),
                note=record.get('note'),
                abdominal_pain=record.get('abdominal_pain'),
                breast_tenderness=record.get('breast_tenderness'),
                intercourse=record.get('intercourse')
            )
        else:
            logging.debug(f"Creating new record for user {user_id}")
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            await db.create_record(
                user_id=user_id,
                record_date=today_db,
                menstruation_type=menstruation_descriptions[menstruation_type]
            )
        
        await callback_query.message.edit_text(f"‚úÖ –ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è '{menstruation_descriptions[menstruation_type]}' –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ {today_display}")
        await callback_query.answer()
    except TelegramForbiddenError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏: {e}")
        import traceback
        logging.error(f"Traceback: {traceback.format_exc()}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —à–µ–π–∫–∏ –º–∞—Ç–∫–∏
@dp.message(F.text == "üîπ –®–µ–π–∫–∞ –º–∞—Ç–∫–∏")
async def handle_cervix_button(message: Message):
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ —à–µ–π–∫–∏ –º–∞—Ç–∫–∏ (–ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)
        builder = InlineKeyboardBuilder()
        builder.button(text="–ù–∏–∑–∫–æ", callback_data="cervix_low")
        builder.button(text="–í—ã—Å–æ–∫–æ", callback_data="cervix_high")
        builder.adjust(2)
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é —à–µ–π–∫–∏ –º–∞—Ç–∫–∏:", reply_markup=builder.as_markup())
    except TelegramForbiddenError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ —à–µ–π–∫–∏ –º–∞—Ç–∫–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —à–µ–π–∫–∏ –º–∞—Ç–∫–∏ (–ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)
@dp.callback_query(lambda c: c.data.startswith("cervix_"))
async def handle_cervix_position_selection(callback_query: CallbackQuery):
    try:
        position = callback_query.data.split("_")[1]  # low –∏–ª–∏ high
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —à–µ–π–∫–∏ –º–∞—Ç–∫–∏ (–≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å)
        builder = InlineKeyboardBuilder()
        builder.button(text="–ó–∞–∫—Ä—ã—Ç–∞", callback_data=f"cervix_state_{position}_closed")
        builder.button(text="–û—Ç–∫—Ä—ã—Ç–∞", callback_data=f"cervix_state_{position}_open")
        builder.adjust(2)
        
        position_text = "–Ω–∏–∑–∫–æ" if position == "low" else "–≤—ã—Å–æ–∫–æ"
        await callback_query.message.edit_text(
            f"–®–µ–π–∫–∞ –º–∞—Ç–∫–∏ {position_text}. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:", 
            reply_markup=builder.as_markup()
        )
        await callback_query.answer()
    except TelegramForbiddenError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —à–µ–π–∫–∏ –º–∞—Ç–∫–∏: {e}")
        import traceback
        logging.error(f"Traceback: {traceback.format_exc()}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —à–µ–π–∫–∏ –º–∞—Ç–∫–∏ (–≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å)
@dp.callback_query(lambda c: c.data.startswith("cervix_state_"))
async def handle_cervix_state_selection(callback_query: CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        parts = callback_query.data.split("_")  # cervix_state_position_state
        position = parts[2]  # low –∏–ª–∏ high
        state = parts[3]     # closed –∏–ª–∏ open
        
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é:
        # 1 - –≤—ã—Å–æ–∫–æ –æ—Ç–∫—Ä—ã—Ç–∞, 2 - –≤—ã—Å–æ–∫–æ –∑–∞–∫—Ä—ã—Ç–∞, 3 - –Ω–∏–∑–∫–æ –æ—Ç–∫—Ä—ã—Ç–∞, 4 - –Ω–∏–∑–∫–æ –∑–∞–∫—Ä—ã—Ç–∞
        cervix_codes = {
            "high_open": 1,    # –≤—ã—Å–æ–∫–æ –æ—Ç–∫—Ä—ã—Ç–∞
            "high_closed": 2,  # –≤—ã—Å–æ–∫–æ –∑–∞–∫—Ä—ã—Ç–∞  
            "low_open": 3,     # –Ω–∏–∑–∫–æ –æ—Ç–∫—Ä—ã—Ç–∞
            "low_closed": 4    # –Ω–∏–∑–∫–æ –∑–∞–∫—Ä—ã—Ç–∞
        }
        
        code_key = f"{position}_{state}"
        cervical_position_code = cervix_codes[code_key]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        position_text = "–≤—ã—Å–æ–∫–æ" if position == "high" else "–Ω–∏–∑–∫–æ"
        state_text = "–æ—Ç–∫—Ä—ã—Ç–∞" if state == "open" else "–∑–∞–∫—Ä—ã—Ç–∞"
        
        today_db = get_today_db_format()  # –§–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
        today_display = get_today_display_format()  # –§–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        logging.debug(f"Processing cervix selection for user {user_id} on date {today_db}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π
        record = await db.get_record_by_date(user_id, today_db)
        if record:
            logging.debug(f"Updating existing record for user {user_id}")
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
            await db.create_record(
                user_id=user_id,
                record_date=today_db,
                temperature=record.get('temperature'),
                mucus_type=record.get('mucus_type'),
                menstruation_type=record.get('menstruation_type'),
                cervical_position=cervical_position_code,
                note=record.get('note')
            )
        else:
            logging.debug(f"Creating new record for user {user_id}")
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            await db.create_record(
                user_id=user_id,
                record_date=today_db,
                cervical_position=cervical_position_code
            )
        
        await callback_query.message.edit_text(
            f"‚úÖ –®–µ–π–∫–∞ –º–∞—Ç–∫–∏ '{position_text} {state_text}' –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ {today_display}"
        )
        await callback_query.answer()
    except TelegramForbiddenError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —à–µ–π–∫–∏ –º–∞—Ç–∫–∏: {e}")
        import traceback
        logging.error(f"Traceback: {traceback.format_exc()}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def handle_note_button(message: Message):
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–º–µ—Ç–æ–∫
        builder = InlineKeyboardBuilder()
        builder.button(text="üò¢ –ë–æ–ª–∏/–≤–∑–¥—É—Ç–∏–µ –∂–∏–≤–æ—Ç–∞", callback_data="note_abdominal_pain")
        builder.button(text="ü§± –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–¥–∏", callback_data="note_breast_tenderness")
        builder.button(text="üíï –°—É–ø—Ä—É–∂–µ—Å–∫–∞—è –±–ª–∏–∑–æ—Å—Ç—å", callback_data="note_intercourse")
        builder.adjust(1)
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏:", reply_markup=builder.as_markup())
    except TelegramForbiddenError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–º–µ—Ç–∫–∏
@dp.callback_query(lambda c: c.data.startswith("note_"))
async def handle_note_selection(callback_query: CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        note_type = callback_query.data.split("_")[1]  # abdominal_pain, breast_tenderness, intercourse
        
        today_db = get_today_db_format()  # –§–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
        today_display = get_today_display_format()  # –§–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        logging.debug(f"Processing note selection for user {user_id} on date {today_db}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ –æ–±–Ω–æ–≤–ª—è—Ç—å
        note_fields = {
            "abdominal_pain": ("abdominal_pain", "üò¢ –ë–æ–ª–∏/–≤–∑–¥—É—Ç–∏–µ –∂–∏–≤–æ—Ç–∞"),
            "breast_tenderness": ("breast_tenderness", "ü§± –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–¥–∏"),
            "intercourse": ("intercourse", "üíï –°—É–ø—Ä—É–∂–µ—Å–∫–∞—è –±–ª–∏–∑–æ—Å—Ç—å")
        }
        
        field_name, field_description = note_fields[note_type]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π
        record = await db.get_record_by_date(user_id, today_db)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_params = {
            "user_id": user_id,
            "record_date": today_db,
            "temperature": record.get('temperature') if record else None,
            "mucus_type": record.get('mucus_type') if record else None,
            "menstruation_type": record.get('menstruation_type') if record else None,
            "cervical_position": record.get('cervical_position') if record else None,
            "note": record.get('note') if record else None,
            "abdominal_pain": record.get('abdominal_pain') if record else None,
            "breast_tenderness": record.get('breast_tenderness') if record else None,
            "intercourse": record.get('intercourse') if record else None
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ
        update_params[field_name] = True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.create_record(**update_params)
        
        await callback_query.message.edit_text(
            f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ: {field_description} –Ω–∞ {today_display}"
        )
        await callback_query.answer()
        
    except TelegramForbiddenError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–º–µ—Ç–∫–∏: {e}")
        import traceback
        logging.error(f"Traceback: {traceback.format_exc()}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
@dp.message(F.text == "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
async def handle_view_data_button(message: Message):
    try:
        user_id = message.from_user.id
        logging.debug(f"Processing view data request for user {user_id}")
        records = await db.get_user_records(user_id, limit=30)
        
        if not records:
            await message.answer("–î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, —Å–ª–∏–∑–∏ –∏–ª–∏ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        data_text = f"üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ —Ü–∏–∫–ª–∞</b>\n\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        for record in records:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_date = format_date(str(record['record_date']))
            data_text += f"üìÖ <b>{display_date}</b>\n"
            if record['temperature']:
                data_text += f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {record['temperature']}¬∞C\n"
            if record['mucus_type']:
                data_text += f"üíß –í—ã–¥–µ–ª–µ–Ω–∏—è: {record['mucus_type']}\n"
            if record['menstruation_type']:
                data_text += f"üíß –í—ã–¥–µ–ª–µ–Ω–∏—è: {record['menstruation_type']}\n"
            if record['cervical_position']:
                # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —à–µ–π–∫–∏ –º–∞—Ç–∫–∏
                cervix_descriptions = {
                    1: "–≤—ã—Å–æ–∫–æ –æ—Ç–∫—Ä—ã—Ç–∞",
                    2: "–≤—ã—Å–æ–∫–æ –∑–∞–∫—Ä—ã—Ç–∞", 
                    3: "–Ω–∏–∑–∫–æ –æ—Ç–∫—Ä—ã—Ç–∞",
                    4: "–Ω–∏–∑–∫–æ –∑–∞–∫—Ä—ã—Ç–∞"
                }
                cervix_text = cervix_descriptions.get(record['cervical_position'], f"–∫–æ–¥ {record['cervical_position']}")
                data_text += f"üîπ –®–µ–π–∫–∞ –º–∞—Ç–∫–∏: {cervix_text}\n"
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
            if record.get('abdominal_pain'):
                data_text += f"üò¢ –ë–æ–ª–∏/–≤–∑–¥—É—Ç–∏–µ –∂–∏–≤–æ—Ç–∞\n"
            if record.get('breast_tenderness'):
                data_text += f"ü§± –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–¥–∏\n"
            if record.get('intercourse'):
                data_text += f"üíï –°—É–ø—Ä—É–∂–µ—Å–∫–∞—è –±–ª–∏–∑–æ—Å—Ç—å\n"
            if record['note']:
                data_text += f"üìù –ó–∞–º–µ—Ç–∫–∞: {record['note']}\n"
            data_text += "\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(data_text) > 4000:
            data_text = data_text[:4000] + "\n... (–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–µ–∑–∞–Ω—ã)"
        
        await message.answer(data_text, parse_mode="HTML", reply_markup=get_main_keyboard())
    except TelegramForbiddenError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        logging.error(f"Traceback: {traceback.format_exc()}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
@dp.message(F.text == "üîÑ –ù–æ–≤—ã–π —Ü–∏–∫–ª")
async def handle_reset_cycle_button(message: Message):
    try:
        # –î–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ "—Å–±—Ä–æ—Å —Ü–∏–∫–ª–∞" –Ω–µ —É–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∞ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –í –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–æ–≤
        today_display = get_today_display_format()
        await message.answer(f"üîÑ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ. –°–µ–≥–æ–¥–Ω—è {today_display}", reply_markup=get_main_keyboard())
    except TelegramForbiddenError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–±—Ä–æ—Å–∞ —Ü–∏–∫–ª–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏
@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def handle_help_button(message: Message):
    try:
        help_text = (
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏–º–ø—Ç–æ—Ç–µ—Ä–º–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üå° –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É - –ó–∞–ø–∏—Å–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é –±–∞–∑–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ç–µ–ª–∞\n"
            "üíß –í—ã–¥–µ–ª–µ–Ω–∏—è - –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—é\n"
            "üîπ –®–µ–π–∫–∞ –º–∞—Ç–∫–∏ - –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ —à–µ–π–∫–∏ –º–∞—Ç–∫–∏\n"
            "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É - –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è\n"
            "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —Ü–∏–∫–ª–∞\n"
            "üîÑ –ù–æ–≤—ã–π —Ü–∏–∫–ª - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª\n"
            "‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–°–∏–º–ø—Ç–æ—Ç–µ—Ä–º–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—É—Ç–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n"
            "1. –ë–∞–∑–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ–ª–∞ (–∏–∑–º–µ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ)\n"
            "2. –ù–∞–±–ª—é–¥–µ–Ω–∏–π –∑–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è–º–∏\n"
            "3. –ü–æ–ª–æ–∂–µ–Ω–∏—è —à–µ–π–∫–∏ –º–∞—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
        )
        await message.answer(help_text, reply_markup=get_main_keyboard())
    except TelegramForbiddenError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)  # Changed to DEBUG for more detailed logging
formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")

# –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–µ
file_handler = TimedRotatingFileHandler(
    filename="logs/fertility_bot.log",
    when="midnight",
    interval=1,
    backupCount=7,
    encoding="utf-8"
)
file_handler.setFormatter(formatter)
file_handler.setLevel(logging.DEBUG)  # Ensure file handler also logs debug messages

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
console_handler.setLevel(logging.INFO)  # Console logs info and above

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
logger.addHandler(file_handler)
logger.addHandler(console_handler)

async def on_startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        await db.initialize()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

async def on_shutdown():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    try:
        await db.close()
        logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–ø—É—Å–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç–∏...")
    try:
        await dp.start_polling(bot)
    except TelegramForbiddenError as e:
        logging.error(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
    except Exception:
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception:
        logging.exception("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")