# fertility_excel_bot_integration.py
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Excel –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å Telegram –±–æ—Ç–æ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
"""

from aiogram import types
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import io
import os
import logging
from excel_data_handler import ExcelDataHandler, import_excel_to_bot, create_excel_template

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel —Ñ–∞–π–ª–∞–º–∏

async def handle_excel_import_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ Excel —Ñ–∞–π–ª–æ–≤"""
    try:
        builder = InlineKeyboardBuilder()
        builder.button(text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª", callback_data="excel_upload")
        builder.button(text="üìÑ –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="excel_template")
        builder.button(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="excel_stats")
        builder.adjust(1)
        
        help_text = (
            "üìä <b>–†–∞–±–æ—Ç–∞ —Å Excel —Ñ–∞–π–ª–∞–º–∏</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—è:\n"
            "üîπ –î–µ–Ω—å —Ü–∏–∫–ª–∞\n"
            "üîπ –î–∞—Ç–∞\n"
            "üîπ –ë–¢–¢ (–ë–∞–∑–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞)\n"
            "üîπ –ù–∞—Ä—É—à–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è\n"
            "üîπ –í—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è\n"
            "üîπ –ü—Ä–∏–º–µ—á–∞–Ω–∏—è\n"
        )
        
        await message.answer(help_text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_excel_import_button: {e}")

async def handle_excel_template_download(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ Excel"""
    try:
        user_id = callback_query.from_user.id
        template_path = f"template_fertility_{user_id}.xlsx"
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
        if create_excel_template(template_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(template_path, 'rb') as file:
                await callback_query.message.answer_document(
                    types.BufferedInputFile(
                        file.read(),
                        filename="template_fertility_tracker.xlsx"
                    ),
                    caption="üìÑ –®–∞–±–ª–æ–Ω Excel –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç–∏\n\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞."
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(template_path)
            
            await callback_query.answer("‚úÖ –®–∞–±–ª–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞", show_alert=True)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_excel_template_download: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_excel_upload_request(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞"""
    try:
        await callback_query.message.edit_text(
            "üì• <b>–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx) —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.\n"
            "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã: –î–µ–Ω—å —Ü–∏–∫–ª–∞, –î–∞—Ç–∞, –ë–¢–¢, –∏ –¥—Ä—É–≥–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—è.",
            parse_mode="HTML"
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_excel_upload_request: {e}")

async def handle_document_upload(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (Excel —Ñ–∞–π–ª–æ–≤)"""
    try:
        document = message.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Excel —Ñ–∞–π–ª
        if not document.file_name.endswith(('.xlsx', '.xls')):
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls)")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
        if document.file_size > 10 * 1024 * 1024:
            await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 10MB")
            return
        
        user_id = message.from_user.id
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await message.bot.get_file(document.file_id)
        file_path = f"temp_excel_{user_id}.xlsx"
        
        await message.bot.download_file(file_info.file_path, file_path)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_message = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            result = await import_excel_to_bot(file_path, user_id)
            
            if result["success"]:
                response_text = (
                    "‚úÖ <b>–ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                    f"üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result['records_imported']}\n"
                )
                
                if "statistics" in result:
                    stats = result["statistics"]
                    response_text += f"üå° –ó–∞–ø–∏—Å–µ–π —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π: {stats.get('temperature_records', 0)}\n"
                    response_text += f"‚ö†Ô∏è –ó–∞–ø–∏—Å–µ–π —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏: {stats.get('records_with_disruptions', 0)}\n"
                    response_text += f"üìù –ó–∞–ø–∏—Å–µ–π —Å –∑–∞–º–µ—Ç–∫–∞–º–∏: {stats.get('records_with_notes', 0)}\n"
                    
                    if stats.get('temperature_stats'):
                        temp_stats = stats['temperature_stats']
                        response_text += f"\nüå° <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:</b>\n"
                        response_text += f"–ú–∏–Ω–∏–º—É–º: {temp_stats.get('min', 0):.2f}¬∞C\n"
                        response_text += f"–ú–∞–∫—Å–∏–º—É–º: {temp_stats.get('max', 0):.2f}¬∞C\n"
                        response_text += f"–°—Ä–µ–¥–Ω–µ–µ: {temp_stats.get('avg', 0):.2f}¬∞C\n"
                
                await progress_message.edit_text(response_text, parse_mode="HTML")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
                if "preview" in result and result["preview"]:
                    await message.answer(f"üìã <b>–ü—Ä–µ–≤—å—é –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</b>\n\n{result['preview']}", parse_mode="HTML")
                    
            else:
                error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await progress_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {error_msg}")
                
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(file_path):
                os.remove(file_path)
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_document_upload: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")

async def handle_excel_stats(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Excel –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user_id = callback_query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from db_handler import db
        records = await db.get_user_records(user_id, limit=100)
        
        if not records:
            await callback_query.answer("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π", show_alert=True)
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        total_records = len(records)
        temp_records = len([r for r in records if r.get('temperature')])
        note_records = len([r for r in records if r.get('note')])
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        temperatures = [float(r['temperature']) for r in records if r.get('temperature')]
        
        stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        stats_text += f"üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}\n"
        stats_text += f"üå° –ó–∞–ø–∏—Å–µ–π —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π: {temp_records}\n"
        stats_text += f"üìã –ó–∞–ø–∏—Å–µ–π —Å –∑–∞–º–µ—Ç–∫–∞–º–∏: {note_records}\n"
        
        if temperatures:
            stats_text += f"\nüå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            stats_text += f"–ú–∏–Ω–∏–º—É–º: {min(temperatures):.2f}¬∞C\n"
            stats_text += f"–ú–∞–∫—Å–∏–º—É–º: {max(temperatures):.2f}¬∞C\n"
            stats_text += f"–°—Ä–µ–¥–Ω–µ–µ: {sum(temperatures)/len(temperatures):.2f}¬∞C\n"
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
        if records:
            latest_record = records[0]  # –ó–∞–ø–∏—Å–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
            stats_text += f"\nüìÖ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:</b>\n"
            stats_text += f"–î–∞—Ç–∞: {latest_record['record_date']}\n"
            if latest_record.get('temperature'):
                stats_text += f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {latest_record['temperature']}¬∞C\n"
            if latest_record.get('note'):
                stats_text += f"–ó–∞–º–µ—Ç–∫–∞: {latest_record['note'][:50]}...\n"
        
        await callback_query.message.edit_text(stats_text, parse_mode="HTML")
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_excel_stats: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

async def export_user_data_to_excel(user_id: int, limit: int = 100) -> str:
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Excel —Ñ–∞–π–ª"""
    try:
        from db_handler import db
        import pandas as pd
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        records = await db.get_user_records(user_id, limit=limit)
        
        if not records:
            return None
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        df_data = []
        for record in records:
            df_data.append({
                '–î–∞—Ç–∞': record['record_date'],
                '–ë–¢–¢': record.get('temperature'),
                '–¢–∏–ø —Å–ª–∏–∑–∏': record.get('mucus_type'),
                '–ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è': record.get('menstruation_type'),
                '–ü–æ–ª–æ–∂–µ–Ω–∏–µ —à–µ–π–∫–∏': record.get('cervical_position'),
                '–ó–∞–º–µ—Ç–∫–∞': record.get('note'),
                '–°–æ–∑–¥–∞–Ω–æ': record['created_at'],
                '–û–±–Ω–æ–≤–ª–µ–Ω–æ': record['updated_at']
            })
        
        df = pd.DataFrame(df_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        output_path = f"export_fertility_{user_id}.xlsx"
        df.to_excel(output_path, index=False)
        
        return output_path
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel: {e}")
        return None

async def handle_export_to_excel(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Excel"""
    try:
        user_id = message.from_user.id
        
        progress_message = await message.answer("‚è≥ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ Excel...")
        
        export_path = await export_user_data_to_excel(user_id)
        
        if export_path and os.path.exists(export_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(export_path, 'rb') as file:
                await message.answer_document(
                    types.BufferedInputFile(
                        file.read(),
                        filename=f"fertility_data_{user_id}.xlsx"
                    ),
                    caption="üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(export_path)
            
            await progress_message.edit_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
        else:
            await progress_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_export_to_excel: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
def register_excel_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Excel —Ñ—É–Ω–∫—Ü–∏–π"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–ª–ª–±—ç–∫–æ–≤
    dp.callback_query.register(handle_excel_template_download, lambda c: c.data == "excel_template")
    dp.callback_query.register(handle_excel_upload_request, lambda c: c.data == "excel_upload")
    dp.callback_query.register(handle_excel_stats, lambda c: c.data == "excel_stats")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    dp.message.register(handle_document_upload, lambda message: message.document is not None)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    dp.message.register(handle_excel_import_button, lambda message: message.text == "üìä Excel –∏–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç")
    dp.message.register(handle_export_to_excel, lambda message: message.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")